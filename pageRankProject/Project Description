Project Description 

This program is used to calculate page ranks in a small model of the internet, using a hash.
The input of the program is a file whose name is given in the command line argument. 
This input file will contain a list of webpage file names that are to be parsed. Every webpage file name will take up a line. A webpage file will consist of random keywords and links to other webpage files. 
For example:
<a href = "test.html"> link </a>

The output consists of three parts separated by a blank line:
 The most referenced page (page that has the highest in-degree);
 A list of all broken links (links to files that don’t exist);
 A list of all sinks or black holes (files with in-degree ≥ 0 but out-degree = 0).

The program will have the following:
 Each test case will have one and only one most referenced page.
 If the test case has no broken links, output “No broken links”.
 If the test case has no sinks, output “No sinks”.
 For broken pages and sinks, the output format should follow the example output provided in Section 4.

“< EOF >” just signals the end of the file, it is not literally a string in the file.
list.txt:
page1.html:
page2.html:
page3.html:
page4.html:
page5.html

page1.html: 
<a href = "page3.html"> page3 </a>
<a href = "page4.html"> page4 </a>
<a href = "page5.html"> page5 </a>
<a href = "page6.html"> page6 </a>
< EOF > 

page2.html: 
<a href = "page1.html"> page1 </a>
< EOF >

page3.html: 
<a href = "page1.html"> page1 </a>
<a href = "page2.html"> page2 </a>
< EOF >

page4.html: 
<a href = "page1.html"> page1 </a>
<a href = "page2.html"> page2 </a>
<a href = "page3.html"> page3 </a> < EOF >

page5.html: 
< EOF > 


Program call:
pagerank.exe list.txt

Output: 
page1.html
page6.html Broken Link
page5.html Sink
< EOF >
